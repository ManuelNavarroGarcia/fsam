import numpy as np
import pytest
from cpsplines.psplines.bspline_basis import BsplineBasis

from fsam.fsam_fit import reparametrize_basis

B1 = (1 / 750) * np.array(
    [
        [0, 0, 0, 125, 500, 125, 0, 0, 0],
        [0, 0, 0, 0, 0, 27, 404, 311, 8],
        [0, 64, 473, 212, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 212, 473, 64, 0],
        [0, 1, 212, 473, 64, 0, 0, 0, 0],
        [0, 0, 27, 404, 311, 8, 0, 0, 0],
        [8, 311, 404, 27, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 125, 500, 125],
        [125, 500, 125, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 8, 311, 404, 27, 0, 0],
        [0, 0, 0, 0, 64, 473, 212, 1, 0],
    ]
)

XZs1 = [
    {
        "X": np.array(
            [
                [1, 5, 25],
                [1, 9, 81],
                [1, 2, 4],
                [1, 8, 64],
                [1, 3, 9],
                [1, 4, 16],
                [1, 1, 1],
                [1, 10, 100],
                [1, 0, 0],
                [1, 6, 36],
                [1, 7, 49],
            ]
        ),
        "Z": np.array(
            [
                [0.0, 0.018831710142, 0.0, 0.079109567293, 0.0, -0.417345999192, 0.0],
                [
                    0.006813265933,
                    0.019368519508,
                    -0.03774817755,
                    -0.046000571484,
                    -0.013283589075,
                    0.315572863043,
                    1.291023963721,
                ],
                [
                    0.011074545334,
                    -0.009787554973,
                    0.017731830246,
                    -0.074614949764,
                    -0.109868356316,
                    0.112295990792,
                    -1.33637086333,
                ],
                [
                    -0.011074545334,
                    -0.009787554973,
                    -0.017731830246,
                    -0.074614949764,
                    0.109868356316,
                    0.112295990792,
                    1.33637086333,
                ],
                [
                    0.00534146978,
                    -0.02034234328,
                    -0.024761207696,
                    -0.032282673989,
                    -0.166585822544,
                    -0.13958871587,
                    -1.07603373425,
                ],
                [
                    -0.0142992449,
                    0.003820616672,
                    -0.037793559355,
                    0.043618806308,
                    -0.120604184046,
                    -0.341194996102,
                    -0.595624976721,
                ],
                [
                    -0.006813265933,
                    0.019368519508,
                    0.03774817755,
                    -0.046000571484,
                    0.013283589075,
                    0.315572863043,
                    -1.291023963721,
                ],
                [
                    0.00715606376,
                    0.011496090191,
                    -0.006751485081,
                    0.022837290181,
                    -0.116580135866,
                    0.371497855063,
                    0.87807312132,
                ],
                [
                    -0.00715606376,
                    0.011496090191,
                    0.006751485081,
                    0.022837290181,
                    0.116580135866,
                    0.371497855063,
                    -0.87807312132,
                ],
                [
                    0.0142992449,
                    0.003820616672,
                    0.037793559355,
                    0.043618806308,
                    0.120604184046,
                    -0.341194996102,
                    0.595624976721,
                ],
                [
                    -0.00534146978,
                    -0.02034234328,
                    0.024761207696,
                    -0.032282673989,
                    0.166585822544,
                    -0.13958871587,
                    1.07603373425,
                ],
            ]
        ),
    }
]


@pytest.mark.parametrize(
    "x_sam, deg, n_int, prediction, Bmatrix",
    [
        ([np.array([5, 9, 2, 8, 3, 4, 1, 10, 0, 6, 7])], [3], [6], [{}], [B1]),
    ],
)
def test_B_matrix(x_sam, deg, n_int, prediction, Bmatrix):
    Bs = []

    for x, d, n, pred in zip(x_sam, deg, n_int, prediction):
        bsp = BsplineBasis(deg=d, xsample=x, n_int=n, prediction=pred)
        bsp.get_matrix_B()
        Bs.append(bsp.matrixB)

    for P, Q in zip(Bs, Bmatrix):
        np.testing.assert_allclose(P, Q)


@pytest.mark.parametrize(
    "x_sam, deg, n_int, ord_d, matricesXZ",
    [
        ([np.array([5, 9, 2, 8, 3, 4, 1, 10, 0, 6, 7])], [4], [6], [3], XZs1),
    ],
)
def test_reparametrization(x_sam, deg, n_int, ord_d, matricesXZ):
    XZs = []

    for x, d, n, o in zip(x_sam, deg, n_int, ord_d):
        bsp = BsplineBasis(deg=d, xsample=x, n_int=n)
        bsp.get_matrix_B()
        XZs.append(reparametrize_basis(bspline=bsp, ord_d=o, x=x))

    for P, Q in zip(XZs, matricesXZ):
        np.testing.assert_allclose(P["X"], Q["X"], atol=1e-15)
        np.testing.assert_allclose(P["Z"], Q["Z"], atol=1e-12)
